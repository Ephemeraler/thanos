// Copyright (c) The Cortex Authors.
// Licensed under the Apache License 2.0.

// 语法版本.
syntax = "proto3";

// 该 package 与编程语言中的包名不完全等价.
package queryrange;

// 生成 golang 代码时 Go 包路径.
option go_package = "queryrange";

// 主要用于生成更快、更紧凑的 Go 代码
import "gogoproto/gogo.proto";

// 引入 Google 官方 protobuf 中定义的 Duration 类型，表示时间间隔
import "google/protobuf/duration.proto";
import "cortex/cortexpb/cortex.proto";
// 引入 Any 类型 —— 是 protobuf 提供的一个动态类型容器，可以封装任何其他 protobuf 消息结构
import "google/protobuf/any.proto";

// 为所有 message 生成 marshaler 和 unmarshaler 方法
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

message PrometheusRequestHeader {
  string Name = 1 [(gogoproto.jsontag) = "-"];
  repeated string Values = 2 [(gogoproto.jsontag) = "-"];
}

message PrometheusRequest {
  string path = 1;
  int64 start = 2;
  int64 end = 3;
  int64 step = 4;
  google.protobuf.Duration timeout = 5 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
  string query = 6;
  CachingOptions cachingOptions = 7 [(gogoproto.nullable) = false];
  repeated PrometheusRequestHeader Headers = 8 [(gogoproto.jsontag) = "-"];
  string stats = 9;
}

message PrometheusResponseHeader {
  string Name = 1 [(gogoproto.jsontag) = "-"];
  repeated string Values = 2 [(gogoproto.jsontag) = "-"];
}

message PrometheusResponse {
  string Status = 1 [(gogoproto.jsontag) = "status"];
  PrometheusData Data = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "data,omitempty"];
  string ErrorType = 3 [(gogoproto.jsontag) = "errorType,omitempty"];
  string Error = 4 [(gogoproto.jsontag) = "error,omitempty"];
  repeated PrometheusResponseHeader Headers = 5 [(gogoproto.jsontag) = "-"];
  repeated string Warnings = 6 [(gogoproto.jsontag) = "warnings,omitempty"];
}

message PrometheusData {
  string ResultType = 1 [(gogoproto.jsontag) = "resultType"];
  repeated SampleStream Result = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "result"];
  PrometheusResponseStats stats = 3 [(gogoproto.jsontag) = "stats,omitempty"];
  Analysis analysis = 4 [(gogoproto.jsontag) = "analysis"];
}

message PrometheusInstantQueryResponse {
  string Status = 1 [(gogoproto.jsontag) = "status"];
  PrometheusInstantQueryData Data = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "data,omitempty"];
  string ErrorType = 3 [(gogoproto.jsontag) = "errorType,omitempty"];
  string Error = 4 [(gogoproto.jsontag) = "error,omitempty"];
  repeated PrometheusResponseHeader Headers = 5 [(gogoproto.jsontag) = "-"];
  repeated string Warnings = 6 [(gogoproto.jsontag) = "warnings,omitempty"];
}

message PrometheusInstantQueryData {
  string ResultType = 1 [(gogoproto.jsontag) = "resultType"];
  PrometheusInstantQueryResult Result = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "result"];
  PrometheusResponseStats stats = 3 [(gogoproto.jsontag) = "stats,omitempty"];
  Analysis analysis = 4 [(gogoproto.jsontag) = "analysis"];
}

message PrometheusInstantQueryResult {
  oneof result {
    cortexpb.Sample scalar = 1;
    StringSample stringSample = 2;
    Vector vector = 3;
    Matrix matrix = 4;
  }
}

message Vector {
  repeated Sample samples = 1;
}

message Matrix {
  repeated SampleStream sampleStreams = 1;
}

message PrometheusResponseStats {
  PrometheusResponseSamplesStats samples = 1 [(gogoproto.jsontag) = "samples"];
}

message PrometheusResponseSamplesStats {
  int64 totalQueryableSamples = 1 [(gogoproto.jsontag) = "totalQueryableSamples"];
  repeated PrometheusResponseQueryableSamplesStatsPerStep totalQueryableSamplesPerStep = 2 [(gogoproto.jsontag) = "totalQueryableSamplesPerStep"];
  int32 peakSamples = 3 [(gogoproto.jsontag) = "peakSamples"];
}

message PrometheusResponseQueryableSamplesStatsPerStep {
  int64 value = 1;
  int64 timestamp_ms = 2;
}

message SampleStream {
  repeated cortexpb.LabelPair labels = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "metric", (gogoproto.customtype) = "github.com/thanos-io/thanos/internal/cortex/cortexpb.LabelAdapter"];
  repeated cortexpb.Sample samples = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "values"];
  repeated SampleHistogramPair histograms = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "histogram"];
}

message Sample {
  repeated cortexpb.LabelPair labels = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "metric", (gogoproto.customtype) = "github.com/thanos-io/thanos/internal/cortex/cortexpb.LabelAdapter"];
  double sampleValue = 2 [(gogoproto.jsontag) = "value"];
  int64 timestamp = 3;
  SampleHistogram histogram = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "histogram"];
}

message StringSample {
  string value = 1;
  int64 timestamp_ms = 2;
}

message SampleHistogramPair {
  int64 timestamp = 1;
  SampleHistogram histogram = 2 [(gogoproto.nullable) = false];
}

message SampleHistogram {
  double count = 1;
  double sum = 2;
  repeated HistogramBucket buckets = 3;
}

message HistogramBucket {
  int32 boundaries = 1;
  double lower = 2;
  double upper = 3;
  double count = 4;
}

message CachedResponse  {
  string key = 1 [(gogoproto.jsontag) = "key"];

  // List of cached responses; non-overlapping and in order.
  repeated Extent extents = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "extents"];
}

message Extent  {
  int64 start = 1 [(gogoproto.jsontag) = "start"];
  int64 end = 2 [(gogoproto.jsontag) = "end"];
  // reserved the previous key to ensure cache transition
  reserved 3;
  string trace_id = 4 [(gogoproto.jsontag) = "-"];
  google.protobuf.Any response = 5 [(gogoproto.jsontag) = "response"];
}

message CachingOptions {
  bool disabled = 1;
}

message Explanation {
  string name = 1 [(gogoproto.jsontag) = "name"];
  repeated Explanation children = 2 [(gogoproto.jsontag) = "children"];
}

message Analysis {
  string name = 1 [(gogoproto.jsontag) = "name"];
  google.protobuf.Duration executionTime = 2 [(gogoproto.customtype) = "Duration", (gogoproto.nullable) = false, (gogoproto.jsontag) = "executionTime"];
  repeated Analysis children = 3 [(gogoproto.jsontag) = "children"];
}
